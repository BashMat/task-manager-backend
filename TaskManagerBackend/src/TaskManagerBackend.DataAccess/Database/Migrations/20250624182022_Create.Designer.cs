// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskManagerBackend.DataAccess.Database;

#nullable disable

namespace TaskManagerBackend.DataAccess.Database.Migrations
{
    [DbContext(typeof(TaskManagerDbContext))]
    [Migration("20250624182022_Create")]
    partial class Create
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TaskManagerBackend.DataAccess.Database.Models.TrackingLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("TrackingLog_PK");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("TrackingLog", (string)null);
                });

            modelBuilder.Entity("TaskManagerBackend.DataAccess.Database.Models.TrackingLogEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<decimal>("OrderIndex")
                        .HasColumnType("decimal(19, 2)");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("TrackingLogId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("TrackingLogEntry_PK");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("StatusId");

                    b.HasIndex("TrackingLogId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("TrackingLogEntry", (string)null);
                });

            modelBuilder.Entity("TaskManagerBackend.DataAccess.Database.Models.TrackingLogEntryStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("TrackingLogId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("TrackingLogEntryStatus_PK");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("TrackingLogId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("TrackingLogEntryStatus", (string)null);
                });

            modelBuilder.Entity("TaskManagerBackend.DataAccess.Database.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("LastName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varbinary(256)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varbinary(256)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id")
                        .HasName("User_PK");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("TaskManagerBackend.DataAccess.Database.Models.TrackingLog", b =>
                {
                    b.HasOne("TaskManagerBackend.DataAccess.Database.Models.User", "CreatedByNavigation")
                        .WithMany("TrackingLogCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("TrackingLog_CreatedBy_FK");

                    b.HasOne("TaskManagerBackend.DataAccess.Database.Models.User", "UpdatedByNavigation")
                        .WithMany("TrackingLogUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .IsRequired()
                        .HasConstraintName("TrackingLog_UpdatedBy_FK");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("TaskManagerBackend.DataAccess.Database.Models.TrackingLogEntry", b =>
                {
                    b.HasOne("TaskManagerBackend.DataAccess.Database.Models.User", "CreatedByNavigation")
                        .WithMany("TrackingLogEntryCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("TrackingLogEntry_CreatedBy_FK");

                    b.HasOne("TaskManagerBackend.DataAccess.Database.Models.TrackingLogEntryStatus", "TrackingLogEntryStatus")
                        .WithMany("TrackingLogEntries")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("TrackingLogEntry_StatusId_FK");

                    b.HasOne("TaskManagerBackend.DataAccess.Database.Models.TrackingLog", "TrackingLog")
                        .WithMany("TrackingLogEntries")
                        .HasForeignKey("TrackingLogId")
                        .IsRequired()
                        .HasConstraintName("TrackingLogEntry_TrackingLogId_FK");

                    b.HasOne("TaskManagerBackend.DataAccess.Database.Models.User", "UpdatedByNavigation")
                        .WithMany("TrackingLogEntryUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .IsRequired()
                        .HasConstraintName("TrackingLogEntry_UpdatedBy_FK");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("TrackingLog");

                    b.Navigation("TrackingLogEntryStatus");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("TaskManagerBackend.DataAccess.Database.Models.TrackingLogEntryStatus", b =>
                {
                    b.HasOne("TaskManagerBackend.DataAccess.Database.Models.User", "CreatedByNavigation")
                        .WithMany("TrackingLogEntryStatusCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("TrackingLogEntryStatus_CreatedBy_FK");

                    b.HasOne("TaskManagerBackend.DataAccess.Database.Models.TrackingLog", "TrackingLog")
                        .WithMany("TrackingLogEntryStatuses")
                        .HasForeignKey("TrackingLogId")
                        .IsRequired()
                        .HasConstraintName("TrackingLogEntryStatus_TrackingLogId_FK");

                    b.HasOne("TaskManagerBackend.DataAccess.Database.Models.User", "UpdatedByNavigation")
                        .WithMany("TrackingLogEntryStatusUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .IsRequired()
                        .HasConstraintName("TrackingLogEntryStatus_UpdatedBy_FK");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("TrackingLog");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("TaskManagerBackend.DataAccess.Database.Models.TrackingLog", b =>
                {
                    b.Navigation("TrackingLogEntries");

                    b.Navigation("TrackingLogEntryStatuses");
                });

            modelBuilder.Entity("TaskManagerBackend.DataAccess.Database.Models.TrackingLogEntryStatus", b =>
                {
                    b.Navigation("TrackingLogEntries");
                });

            modelBuilder.Entity("TaskManagerBackend.DataAccess.Database.Models.User", b =>
                {
                    b.Navigation("TrackingLogCreatedByNavigations");

                    b.Navigation("TrackingLogEntryCreatedByNavigations");

                    b.Navigation("TrackingLogEntryStatusCreatedByNavigations");

                    b.Navigation("TrackingLogEntryStatusUpdatedByNavigations");

                    b.Navigation("TrackingLogEntryUpdatedByNavigations");

                    b.Navigation("TrackingLogUpdatedByNavigations");
                });
#pragma warning restore 612, 618
        }
    }
}
